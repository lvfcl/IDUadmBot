import importlib
import configC
import zipfile 
import asyncio
import config
import glob
import time
import os
from aiogram.filters import StateFilter
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile, ContentType, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from typing import Dict

bot = Bot(token=configC.BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
admin_sessions: Dict[int, asyncio.Task] = {}
admin_lock = asyncio.Lock()
authorized_admins = {}
active_forms = {}
submissions = {}
ADMIN_TIMEOUT = 600

photo_responses = {
    "üéì –°–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ": "–°–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ.jpg",
    "üóì –ö–∞–ª–µ–Ω–¥–∞—Ä –≤—Å—Ç—É–ø—É": "–ö–∞–ª–µ–Ω–¥–∞—Ä –≤—Å—Ç—É–ø—É.jpg",
    "üìã –£–º–æ–≤–∏ –≤—ñ–¥–±–æ—Ä—É": "–£–º–æ–≤–∏ –≤—ñ–¥–±–æ—Ä—É.jpg",
    "üìä –í–∏–º–æ–≥–∏ –¥–æ –∫–æ–Ω–∫—É—Ä—Å–Ω–æ–≥–æ –±–∞–ª—É": "–í–∏–º–æ–≥–∏ –¥–æ –∫–æ–Ω–∫—É—Ä—Å–Ω–æ–≥–æ –±–∞–ª—É.jpg",
    "üí∏ –î–∂–µ—Ä–µ–ª–∞ —Ñ—ñ–Ω–∞–Ω—Å—É–≤–∞–Ω–Ω—è": "–î–∂–µ—Ä–µ–ª–∞ —Ñ—ñ–Ω–∞–Ω—Å—É–≤–∞–Ω–Ω—è.jpg",
    "üìÑ –ö–æ–Ω–∫—É—Ä—Å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –ù–∞–≤—á–∞–ª—å–Ω–æ-–Ω–∞—É–∫–æ–≤–æ–≥–æ —ñ–Ω—Å—Ç–∏—Ç—É—Ç—É \"–Ü–Ω—Å—Ç–∏—Ç—É—Ç –¥–µ—Ä–∂–∞–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è\" –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ–≤–Ω–æ—ó –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å–µ—Ä–µ–¥–Ω—å–æ—ó –æ—Å–≤—ñ—Ç–∏":
        "–ö–æ–Ω–∫—É—Ä—Å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –ù–∞–≤—á–∞–ª—å–Ω–æ-–Ω–∞—É–∫–æ–≤–æ–≥–æ —ñ–Ω—Å—Ç–∏—Ç—É—Ç—É '–Ü–Ω—Å—Ç–∏—Ç—É—Ç –¥–µ—Ä–∂–∞–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è' –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ–≤–Ω–æ—ó –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å–µ—Ä–µ–¥–Ω—å–æ—ó –æ—Å–≤—ñ—Ç–∏.jpg",
    "üéì –ö–æ–Ω–∫—É—Ä—Å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ñ–∞—Ö–æ–≤–æ–≥–æ –º–æ–ª–æ–¥—à–æ–≥–æ –±–∞–∫–∞–ª–∞–≤—Ä–∞, –º–æ–ª–æ–¥—à–æ–≥–æ –±–∞–∫–∞–ª–∞–≤—Ä–∞, –º–æ–ª–æ–¥—à–æ–≥–æ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∞":
        "–ö–æ–Ω–∫—É—Ä—Å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ñ–∞—Ö–æ–≤–æ–≥–æ –º–æ–ª–æ–¥—à–æ–≥–æ –±–∞–∫–∞–ª–∞–≤—Ä–∞, –º–æ–ª–æ–¥—à–æ–≥–æ –±–∞–∫–∞–ª–∞–≤—Ä–∞, –º–æ–ª–æ–¥—à–æ–≥–æ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∞.jpg",
    "üéì –ö–æ–Ω–∫—É—Ä—Å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–¥–æ–±—É—Ç–æ–≥–æ —Ä—ñ–≤–Ω—è –≤–∏—â–æ—ó –æ—Å–≤—ñ—Ç–∏ (2 –≤–∏—â–∞ –æ—Å–≤—ñ—Ç–∞)":
        "–ö–æ–Ω–∫—É—Ä—Å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–¥–æ–±—É—Ç–æ–≥–æ —Ä—ñ–≤–Ω—è –≤–∏—â–æ—ó –æ—Å–≤—ñ—Ç–∏ (2 –≤–∏—â–∞ –æ—Å–≤—ñ—Ç–∞).jpg",
    "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏": "–ö–æ–Ω—Ç–∞–∫—Ç–∏.jpg"
}

class AdminState(StatesGroup):
    waiting_for_password = State()
    waiting_for_config = State()
    waiting_for_config_media_zip = State()


menu_start_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üéì –°—Ç—É–¥–µ–Ω—Ç")], [KeyboardButton(text="üöÄ –í—Å—Ç—É–ø–Ω–∏–∫")],
        [KeyboardButton(text="‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")],
    ],
    resize_keyboard=True
)  

menu_student_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÖ –†–æ–∑–∫–ª–∞–¥")],
        [KeyboardButton(text="üè´ –î–æ–≤—ñ–¥–∫–∞ –ø—Ä–æ –º—ñ—Å—Ü–µ –Ω–∞–≤—á–∞–Ω–Ω—è")],
        [KeyboardButton(text="‚ö†Ô∏è –°–∫–∞—Ä–≥–∏ —Ç–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è")],
        [KeyboardButton(text="üéì C—Ç—É–¥–µ–Ω—Ç—Å—å–∫–∞ —Ä–∞–¥–∞")],
        [KeyboardButton(text="üåê –°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ")],
        [KeyboardButton(text="üìû –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True
)

menu_complaints_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–°–∫–∞—Ä–≥–∏ —Ç–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è"), KeyboardButton(text="–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—Ä—É—à–µ–Ω–Ω—è")],
        [KeyboardButton(text="üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å")],
    ],
    resize_keyboard=True
)

back_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ùå –í—ñ–¥–º—ñ–Ω–∞")]
    ],
    resize_keyboard=True
)

entrant_main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìò –ê–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç—É"), KeyboardButton(text="‚ùì –Ø–∫ –≤—Å—Ç—É–ø–∏—Ç–∏")],
        [KeyboardButton(text="üí∞ –§—ñ–Ω–∞–Ω—Å–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è"), KeyboardButton(text= "üîô –ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True
)

entrant_info_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üéì –°–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ")],
        [KeyboardButton(text="üóì –ö–∞–ª–µ–Ω–¥–∞—Ä –≤—Å—Ç—É–ø—É")],
        [KeyboardButton(text="üìã –£–º–æ–≤–∏ –≤—ñ–¥–±–æ—Ä—É")],
        [KeyboardButton(text="üìä –í–∏–º–æ–≥–∏ –¥–æ –∫–æ–Ω–∫—É—Ä—Å–Ω–æ–≥–æ –±–∞–ª—É")],
        [KeyboardButton(text="üí∏ –î–∂–µ—Ä–µ–ª–∞ —Ñ—ñ–Ω–∞–Ω—Å—É–≤–∞–Ω–Ω—è")],
        [KeyboardButton(text='üìÑ –ö–æ–Ω–∫—É—Ä—Å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –ù–∞–≤—á–∞–ª—å–Ω–æ-–Ω–∞—É–∫–æ–≤–æ–≥–æ —ñ–Ω—Å—Ç–∏—Ç—É—Ç—É "–Ü–Ω—Å—Ç–∏—Ç—É—Ç –¥–µ—Ä–∂–∞–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è" –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ–≤–Ω–æ—ó –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å–µ—Ä–µ–¥–Ω—å–æ—ó –æ—Å–≤—ñ—Ç–∏')],
        [KeyboardButton(text="üéì –ö–æ–Ω–∫—É—Ä—Å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ñ–∞—Ö–æ–≤–æ–≥–æ –º–æ–ª–æ–¥—à–æ–≥–æ –±–∞–∫–∞–ª–∞–≤—Ä–∞, –º–æ–ª–æ–¥—à–æ–≥–æ –±–∞–∫–∞–ª–∞–≤—Ä–∞, –º–æ–ª–æ–¥—à–æ–≥–æ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∞")],
        [KeyboardButton(text="üéì –ö–æ–Ω–∫—É—Ä—Å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–¥–æ–±—É—Ç–æ–≥–æ —Ä—ñ–≤–Ω—è –≤–∏—â–æ—ó –æ—Å–≤—ñ—Ç–∏ (2 –≤–∏—â–∞ –æ—Å–≤—ñ—Ç–∞)")],
        [KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏")],
        [KeyboardButton(text="üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≤–∏–±–æ—Ä—É")],
    ],
    resize_keyboard=True
)


how_to_apply_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìë –Ø–∫—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–ª—è –≤—Å—Ç—É–ø—É?"), KeyboardButton(text="üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –±–∞–ª—É –ù–ú–¢")],
        [KeyboardButton(text="üåê –Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –≤—Å—Ç—É–ø–∏—Ç–∏ –æ–Ω–ª–∞–π–Ω"), KeyboardButton(text="‚úçÔ∏è –®–∞–±–ª–æ–Ω –º–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω–æ–≥–æ –ª–∏—Å—Ç–∞")],
        [KeyboardButton(text="üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≤–∏–±–æ—Ä—É")],
    ],
    resize_keyboard=True
)

financial_info_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å –Ω–∞–≤—á–∞–Ω–Ω—è"), KeyboardButton(text="üéì –°—Ç–∏–ø–µ–Ω–¥—ñ—ó?")],
        [KeyboardButton(text="üèÖ –í—ñ–π—Å—å–∫–æ–≤–∞ –∫–∞—Ñ–µ–¥—Ä–∞?"), KeyboardButton(text="üè† –ì—É—Ä—Ç–æ–∂–∏—Ç–æ–∫?")],
        [KeyboardButton(text="üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≤–∏–±–æ—Ä—É")],
    ],
    resize_keyboard=True
)

admin_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìò –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –∑ –µ–∫—Å–ø–ª—É–∞—Ç–∞—Ü—ñ—ó –±–æ—Ç–∞")],
        [KeyboardButton(text="üìÑ Config file"), KeyboardButton(text="üìù New config file")],
        [KeyboardButton(text="üóÉ Config_media"), KeyboardButton(text="üì• New config_media")],
        [KeyboardButton(text="üìú –ê—Ä—Öi–≤")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True
)


@dp.message(F.text == "/start")
async def start_command(message: types.Message):
    await message.answer("–í—ñ—Ç–∞—î–º–æ! –û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–¥—ñ–ª:", reply_markup=menu_start_keyboard)
    

@dp.message(F.text == "üéì –°—Ç—É–¥–µ–Ω—Ç")
async def student_command(message: types.Message):
    await message.answer("""
–í—ñ—Ç–∞—î–º–æ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ñ ¬´–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º¬ª –Ü–Ω—Å—Ç–∏—Ç—É—Ç—É –¥–µ—Ä–∂–∞–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è! –¶—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞ –¥–ª—è —Ç–æ–≥–æ, —â–æ–± —Å–ø—Ä–æ—Å—Ç–∏—Ç–∏ –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—é —Ç–∞ –∑—Ä–æ–±–∏—Ç–∏ –í–∞—à–µ –Ω–∞–≤—á–∞–Ω–Ω—è –ª–µ–≥—à–µ —Ç–∞ —Ü—ñ–∫–∞–≤—ñ—à–∏–º!

–ß–∏–º –º–æ–∂–µ–º–æ –í–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏ ?
""", reply_markup=menu_student_keyboard)


@dp.message(F.text == "üìÖ –†–æ–∑–∫–ª–∞–¥")
async def schedule_command(message: types.Message):
    await message.answer(config.link_schedule)


@dp.message(F.text == "üè´ –î–æ–≤—ñ–¥–∫–∞ –ø—Ä–æ –º—ñ—Å—Ü–µ –Ω–∞–≤—á–∞–Ω–Ω—è")
async def info_command(message: types.Message):
    await message.answer(config.link_info)


@dp.message(F.text == "‚ö†Ô∏è –°–∫–∞—Ä–≥–∏ —Ç–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è")
async def complaints_command(message: types.Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–¥—ñ–ª:", reply_markup=menu_complaints_keyboard)
    

@dp.message(F.text == "–°–∫–∞—Ä–≥–∏ —Ç–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è")
async def complaints_command(message: types.Message):
    active_forms[message.from_user.id] = "–°–∫–∞—Ä–≥–∏ —Ç–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è"
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ª–∏—à—Ç–µ —Ç—É—Ç –í–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è (–¢–∞–∫–æ–∂, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –í–∞—à –ü–Ü–ë —Ç–∞ –∞–∫–∞–¥–µ–º—ñ—á–Ω—É –≥—Ä—É–ø—É).", reply_markup=back_keyboard)


@dp.message(F.text == "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—Ä—É—à–µ–Ω–Ω—è")
async def violations_command(message: types.Message):
    active_forms[message.from_user.id] = "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—Ä—É—à–µ–Ω–Ω—è"
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ –ø–æ—Ä—É—à–µ–Ω–Ω—è —Ç–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø—ñ–¥–∫—Ä—ñ–ø–ª—é—é—á—ñ –¥–æ–∫–∞–∑–∏ (–∑–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é). –í–æ–Ω–∞ –±—É–¥–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∞–Ω–æ–Ω—ñ–º–Ω–æ.", reply_markup=back_keyboard)


@dp.message(F.text == "üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å")
async def back_command(message: types.Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–¥—ñ–ª:", reply_markup=menu_student_keyboard)


@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def fullback_command(message: types.Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–¥—ñ–ª:", reply_markup=menu_start_keyboard)


@dp.message(F.text == "üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≤–∏–±–æ—Ä—É")
async def back_to_entrant_command(message: types.Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —â–æ –í–∞–º –ø—ñ–¥–∫–∞–∑–∞—Ç–∏:", reply_markup=entrant_main_keyboard)


@dp.message(F.text == "üéì C—Ç—É–¥–µ–Ω—Ç—Å—å–∫–∞ —Ä–∞–¥–∞")
async def send_student_council_info(message: types.Message):
    caption = (
        "üéì –°—Ç—É–¥–µ–Ω—Ç—Å—å–∫–∞ —Ä–∞–¥–∞ –ù–ù–Ü ¬´–Ü–î–£¬ª ‚Äî —Ü–µ —Å–µ—Ä—Ü–µ –Ω–∞—à–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç—Å—å–∫–æ–≥–æ –∂–∏—Ç—Ç—è, –º—ñ—Å—Ü–µ —ñ–¥–µ–π, –¥—Ä–∞–π–≤—É —Ç–∞ –¥—ñ–π! üí•\n\n"
        "üí° –¢—É—Ç —Ç–∏ –º–æ–∂–µ—à –Ω–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–≤—á–∞—Ç–∏—Å—è, –∞ —Ç–≤–æ—Ä–∏—Ç–∏ –∑–º—ñ–Ω–∏, —Ä–µ–∞–ª—ñ–∑–æ–≤—É–≤–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç–∏, –∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è –∑ –æ–¥–Ω–æ–¥—É–º—Ü—è–º–∏ —Ç–∞ –±—É—Ç–∏ –≤ –µ–ø—ñ—Ü–µ–Ω—Ç—Ä—ñ –≤—Å—ñ—Ö –ø–æ–¥—ñ–π!\n\n"
        "üìå –•–æ—á–µ—à –±—ñ–ª—å—à–µ, –Ω—ñ–∂ –ø—Ä–æ—Å—Ç–æ –ø–∞—Ä–∏? –¢—É—Ç —Ç–µ–±–µ –ø–æ—á—É—é—Ç—å, –ø—ñ–¥—Ç—Ä–∏–º–∞—é—Ç—å —ñ –Ω–∞–¥–∏—Ö–Ω—É—Ç—å!\n\n"
        f"üì≤ <a href='{config.studrada_tg_link}'>–ö–ª—ñ–∫–∞–π</a> ‚Äî —ñ –¥–æ—î–¥–Ω—É–π—Å—è –¥–æ –∫–æ–º‚Äô—é–Ω—ñ—Ç—ñ –∞–∫—Ç–∏–≤–Ω–∏—Ö! üåü"
    )

    await message.answer_photo(
    photo=FSInputFile(configC.MEDIA_PATH + "studrada.jpg"),
    caption=caption,
    parse_mode="HTML"
    )   

@dp.message(F.text == "üåê –°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ")
async def social_command(message: types.Message):
    await message.answer(config.link_social)


@dp.message(F.text == "üìû –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è")
async def consultation_command(message: types.Message):
    await message.answer(config.link_consultation)


@dp.message(F.text == "üöÄ –í—Å—Ç—É–ø–Ω–∏–∫")
async def entrant_command(message: types.Message):
    await message.answer("""
–í—ñ—Ç–∞—î–º–æ –≤ <b>–Ü–Ω—Å—Ç–∏—Ç—É—Ç—ñ –¥–µ—Ä–∂–∞–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è</b>!\n\n
–ú–∏ ‚Äî –æ—Å–µ—Ä–µ–¥–æ–∫ –º–∞–π–±—É—Ç–Ω—ñ—Ö –ª—ñ–¥–µ—Ä—ñ–≤, —â–æ –∑–º—ñ–Ω—é—é—Ç—å –∫—Ä–∞—ó–Ω—É. –ù–∞—à —ñ–Ω—Å—Ç–∏—Ç—É—Ç —Ñ–æ—Ä–º—É—î —É–ø—Ä–∞–≤–ª—ñ–Ω—Ü—ñ–≤ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª—ñ–Ω–Ω—è, –∑–¥–∞—Ç–Ω–∏—Ö –≤–∏—Ä—ñ—à—É–≤–∞—Ç–∏ —Å–∫–ª–∞–¥–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è —Ç–∞ –≤–ø—Ä–æ–≤–∞–¥–∂—É–≤–∞—Ç–∏ —ñ–Ω–Ω–æ–≤–∞—Ü—ñ—ó –≤ –¥–µ—Ä–∂–∞–≤–Ω–æ–º—É —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—ñ, –±—ñ–∑–Ω–µ—Å—ñ —Ç–∞ –≥—Ä–æ–º–∞–¥—Å—å–∫–æ–º—É —Å–µ–∫—Ç–æ—Ä—ñ.\n
–ú–∏ –Ω–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–≤—á–∞—î–º–æ ‚Äî –º–∏ –≥–æ—Ç—É—î–º–æ –¥–æ —Ä–µ–∞–ª—å–Ω–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤. –ù–∞—à–∞ –º–µ—Ç–∞ ‚Äî –ø–µ—Ä–µ–¥–∞—Ç–∏ –≤–∞–º –Ω–µ –ª–∏—à–µ –∑–Ω–∞–Ω–Ω—è, –∞–ª–µ –π –Ω–∞–≤–∏—á–∫–∏, —â–æ –¥–æ–∑–≤–æ–ª—è—é—Ç—å –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ —Ä—ñ—à–µ–Ω–Ω—è –≤ —É–º–æ–≤–∞—Ö —à–≤–∏–¥–∫–∏—Ö –∑–º—ñ–Ω. –£ –Ω–∞—Å –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –æ—Å–≤—ñ—Ç—É, –æ—Ä—ñ—î–Ω—Ç–æ–≤–∞–Ω—É –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞–π–∫—Ä–∞—â–∏–º –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º.\n
–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –¥–æ –Ω–∞—Å —ñ —Å—Ç–∞–Ω—å—Ç–µ —á–∞—Å—Ç–∏–Ω–æ—é –ø–æ–∫–æ–ª—ñ–Ω–Ω—è, —è–∫–µ –≤–ø–ª–∏–≤–∞—Ç–∏–º–µ –Ω–∞ –º–∞–π–±—É—Ç–Ω—î!\n
üì© –ó–∞—Ä–æ—à—É—î–º–æ –ø—Ä–∏—î–Ω–∞—Ç–∏—Å—è –¥–æ –Ω–∞—à–æ—ó –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ–π–Ω–æ—ó –≥—Ä—É–ø–∏, —â–æ–± —Å–ª—ñ–¥–∫—É–≤–∞—Ç–∏ –∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∏–º–∏ –Ω–æ–≤–∏–Ω–∞–º–∏ —Ç–∞ —É —Ä–∞–∑—ñ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –∑–∞–ø–∏—Ç–∞–Ω—å: https://t.me/+kLxaztb5CndlNWYy

""", parse_mode="HTML", reply_markup=entrant_main_keyboard)


@dp.message(lambda message: message.text in photo_responses)
async def send_photo_from_dict(message: types.Message):
    file_name = photo_responses[message.text]
    await message.answer_photo(photo=FSInputFile(configC.MEDIA_PATH + file_name))


@dp.message(F.text == "üìò –ê–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç—É")
async def entrant_info_command(message: types.Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —â–æ –í–∞–º –ø—ñ–¥–∫–∞–∑–∞—Ç–∏:", reply_markup=entrant_info_keyboard)


@dp.message(F.text == "‚ùì –Ø–∫ –≤—Å—Ç—É–ø–∏—Ç–∏")
async def how_to_apply_command(message: types.Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —â–æ –í–∞–º –ø—ñ–¥–∫–∞–∑–∞—Ç–∏:", reply_markup=how_to_apply_keyboard)


@dp.message(F.text == "üìë –Ø–∫—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–ª—è –≤—Å—Ç—É–ø—É?")
async def documents_command(message: types.Message):
    await message.answer("""
üìå –í–∞–º –∑–Ω–∞–¥–æ–±–ª—è—Ç—å—Å—è:
‚Ä¢  	–ü–∞—Å–ø–æ—Ä—Ç –∞–±–æ ID-–∫–∞—Ä—Ç–∫–∞
‚Ä¢  	–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–∏–π –∫–æ–¥
‚Ä¢  	–ê—Ç–µ—Å—Ç–∞—Ç –ø—Ä–æ –ø–æ–≤–Ω—É –∑–∞–≥–∞–ª—å–Ω—É —Å–µ—Ä–µ–¥–Ω—é –æ—Å–≤—ñ—Ç—É —Ç–∞ –¥–æ–¥–∞—Ç–æ–∫ –¥–æ –Ω—å–æ–≥–æ
‚Ä¢  	–°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏ –ù–ú–¢ ( –ë–µ–∑ –ù–ú–¢ –º–æ–∂—É—Ç—å –≤—Å—Ç—É–ø–∞—Ç–∏ —ñ–Ω–æ–∑–µ–º—Ü—ñ, –∞–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç–∏ –∑ –ø—ñ–ª—å–≥–∞–º–∏ –∞–±–æ —Ç—ñ, —Ö—Ç–æ –≤–∂–µ –º–∞—î –¥–∏–ø–ª–æ–º –ø—Ä–æ –≤–∏—â—É –æ—Å–≤—ñ—Ç—É. )
‚Ä¢  	–§–æ—Ç–æ 3√ó4
""", reply_markup=how_to_apply_keyboard)


@dp.message(F.text == "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –±–∞–ª—É –ù–ú–¢")
async def calculator_command(message: types.Message):
    await message.answer(f"""
–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –±–∞–ª—É –ù–ú–¢: 
{config.NMT_link}/\n
<a href='{config.coefficients_link}'>–¢—É—Ç</a> –º–æ–∂–µ—Ç–µ –ø–æ–±–∞—á–∏—Ç–∏ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –∑–∞ –Ω–∞—à–∏–º–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—è–º–∏: 
""", parse_mode="HTML", reply_markup=how_to_apply_keyboard)


@dp.message(F.text == "üåê –Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –≤—Å—Ç—É–ø–∏—Ç–∏ –æ–Ω–ª–∞–π–Ω")
async def online_entry_command(message: types.Message):
    await message.answer("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è", reply_markup=how_to_apply_keyboard)


@dp.message(F.text == "‚úçÔ∏è –®–∞–±–ª–æ–Ω –º–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω–æ–≥–æ –ª–∏—Å—Ç–∞")
async def motivation_letter_command(message: types.Message):
    await message.answer_document(document=FSInputFile(configC.MEDIA_PATH + "–ú–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω–∏–π –ª–∏—Å—Ç.docx"))
        
    await message.answer("""
üìÑ –ú–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω–∏–π –ª–∏—Å—Ç –º–∞—î —á—ñ—Ç–∫–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏ –≤–∞—à—ñ —Ü—ñ–ª—ñ, –±–∞–∂–∞–Ω–Ω—è –Ω–∞–≤—á–∞—Ç–∏—Å—è –Ω–∞ –æ–±—Ä–∞–Ω—ñ–π —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ —Ç–∞ –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å –¥–æ –ø–æ–¥–æ–ª–∞–Ω–Ω—è —Å–∫–ª–∞–¥–Ω–æ—â—ñ–≤.\n
–í–∞–∂–ª–∏–≤–æ –∑–∞–∑–Ω–∞—á–∏—Ç–∏, —á–æ–º—É –≤–∏ –æ–±—Ä–∞–ª–∏ —Å–∞–º–µ —Ü—é –ø—Ä–æ–≥—Ä–∞–º—É —Ç–∞ —è–∫ –ø–ª–∞–Ω—É—î—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω—ñ –∑–Ω–∞–Ω–Ω—è –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É.
""", reply_markup=how_to_apply_keyboard)


@dp.message(F.text == "üí∞ –§—ñ–Ω–∞–Ω—Å–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è")
async def financial_info_command(message: types.Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —â–æ –í–∞–º –ø—ñ–¥–∫–∞–∑–∞—Ç–∏:", reply_markup=financial_info_keyboard)


@dp.message(F.text == "üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å –Ω–∞–≤—á–∞–Ω–Ω—è")
async def tuition_fee_command(message: types.Message):
    await message.answer("üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å –Ω–∞–≤—á–∞–Ω–Ω—è –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ.\n–ù–∞—Ä–∞–∑—ñ —Ü—ñ–Ω–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω —É —Å—Ç–∞–¥—ñ—ó —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è.") 


@dp.message(F.text == "üéì –°—Ç–∏–ø–µ–Ω–¥—ñ—ó?")
async def scholarships_command(message: types.Message):
    await message.answer("""
üéì –¢–∞–∫, —î –¥–µ–∫—ñ–ª—å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —Ö—Ç–æ –º–æ–∂–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å—Ç–∏–ø–µ–Ω–¥—ñ—é –ø—ñ–¥ —á–∞—Å –Ω–∞–≤—á–∞–Ω–Ω—è: \n
1300 –≥—Ä–Ω - —Å–æ—Ü—ñ–∞–ª—å–Ω—É —Å—Ç–∏–ø–µ–Ω–¥—ñ—é –æ—Ç—Ä–∏–º—É—é—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∏ —è–∫—ñ –ø—ñ–¥–ø–∞–¥–∞—é—Ç—å –≤ –Ω–µ–∑–∞—Ö–∏—â–µ–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–∞—Å–µ–ª–µ–Ω–Ω—è.\n
2000 –≥—Ä–Ω - –∞–∫–∞–¥–µ–º—ñ—á–Ω—É —Å—Ç–∏–ø–µ–Ω–¥—ñ—é –æ—Ç—Ä–∏–º—É—é—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∏ –∑ –∫—Ä–∞—â–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤ –Ω–∞–≤—á–∞–Ω–Ω—ñ –≤ —Å–≤–æ—ó–π –∞–∫–∞–¥–µ–º—ñ—á–Ω—ñ–π –≥—Ä—É–ø—ñ ( —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –±—é–¥–∂–µ—Ç–Ω–æ—ó —Ñ–æ—Ä–º–∏ –Ω–∞–≤—á–∞–Ω–Ω—è ).\n
3000 –≥—Ä–Ω - –ø—ñ–¥–≤–∏—â–µ–Ω—É –∞–∫–∞–¥–µ–º—ñ—á–Ω—É —Å—Ç–∏–ø–µ–Ω–¥—ñ—é –æ—Ç—Ä–∏–º—É—é—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∏ –∑ –Ω–∞–π–∫—Ä–∞—â–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—ñ ( —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –±—é–¥–∂–µ—Ç–Ω–æ—ó —Ñ–æ—Ä–º–∏ –Ω–∞–≤—á–∞–Ω–Ω—è ).\n
–ù–∞–≤—ñ—Ç—å —è–∫—â–æ –í–∏ –≤—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —É –í–∞—Å –º–æ–∂–µ –±—É—Ç–∏ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏—Å—è –Ω–∞ –±—é–¥–∂–µ—Ç.
""")


@dp.message(F.text == "üèÖ –í—ñ–π—Å—å–∫–æ–≤–∞ –∫–∞—Ñ–µ–¥—Ä–∞?")
async def military_department_command(message: types.Message):
    await message.answer("""
üéñÔ∏è –¢–∞–∫, —Å—Ç—É–¥–µ–Ω—Ç–∏ –º–æ–∂—É—Ç—å –ø—Ä–æ–π—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è –Ω–∞ –≤—ñ–π—Å—å–∫–æ–≤—ñ–π –∫–∞—Ñ–µ–¥—Ä—ñ.\n
–í—ñ–¥ –≤–µ—Ä–µ—Å–Ω—è 2025 —Ä–æ–∫—É –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –≤ –£–∫—Ä–∞—ó–Ω—ñ —Å—Ç–∞—Ä—Ç—É—î –æ–±–æ–≤'—è–∑–∫–æ–≤–∞ –±–∞–∑–æ–≤–∞ –∑–∞–≥–∞–ª—å–Ω–æ–≤—ñ–π—Å—å–∫–æ–≤–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ (–ë–ó–í–ü).\n
–í–æ–Ω–∞ –≤–∫–ª—é—á–∞—Ç–∏–º–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–Ω—É —á–∞—Å—Ç–∏–Ω—É, —è–∫—É –≤–∏–∫–ª–∞–¥–∞—Ç–∏–º—É—Ç—å —É –∑–∞–∫–ª–∞–¥–∞—Ö –æ—Å–≤—ñ—Ç–∏, —Ç–∞ –ø—Ä–∞–∫—Ç–∏–∫—Ç–∏—á–Ω—É ‚Äì —É –≤—ñ–π—Å—å–∫–æ–≤–∏—Ö —á–∞—Å—Ç–∏–Ω–∞—Ö —ñ —Ü–µ–Ω—Ç—Ä–∞—Ö.\n
""")


@dp.message(F.text == "üè† –ì—É—Ä—Ç–æ–∂–∏—Ç–æ–∫?")
async def dormitory_command(message: types.Message):
    await message.answer("üè† –¢–∞–∫, –≥—É—Ä—Ç–æ–∂–∏—Ç–æ–∫ —î.\n\n –í–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è ‚Äì –≤—ñ–¥ 520 –≥—Ä–Ω –Ω–∞ –º—ñ—Å—è—Ü—å.\n\n –ì—É—Ä—Ç–æ–∂–∏—Ç–∫–∏ —î –≤ —Ä—ñ–∑–Ω–∏—Ö —á–∞—Å—Ç–∏–Ω–∞—Ö –º—ñ—Å—Ç–∞, –º–æ–∂–Ω–∞ –æ–±—Ä–∞—Ç–∏ –∑—Ä—É—á–Ω–∏–π –≤–∞—Ä–∞–Ω—Ç –¥–ª—è —Å–µ–±–µ.")


@dp.message(F.text == "‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def admin_command(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å:", reply_markup=back_keyboard)
    await state.set_state(AdminState.waiting_for_password)


def is_admin_authorized(user_id: int) -> bool:
    now = time.time()
    if user_id in authorized_admins:
        authorized_time = authorized_admins[user_id]
        if now - authorized_time < ADMIN_TIMEOUT:
            return True
        else:
            authorized_admins.pop(user_id)
    return False


@dp.message(AdminState.waiting_for_password)
async def check_admin_password(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –í—ñ–¥–º—ñ–Ω–∞":
        await message.answer("‚ùå –í—ñ–¥–º—ñ–Ω–∞ –≤—Ö–æ–¥—É –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=menu_start_keyboard)
        return await state.clear()
    
    if message.text != config.admins_password:
        return await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

    authorized_admins[message.from_user.id] = time.time()
    await message.answer("‚úÖ –í—Ö—ñ–¥ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=admin_keyboard)
    await message.answer(
        "–í–∞—à–∞ —Å–µ—Å—ñ—è —Ç—Ä–∏–≤–∞—Ç–∏–º–µ 10 —Ö–≤–∏–ª–∏–Ω, –ø—ñ—Å–ª—è —á–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –∑–∞–Ω–æ–≤–æ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å.\n"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –±—É–¥—å—Ç–µ –æ–±–µ—Ä–µ–∂–Ω—ñ –ø—Ä–∏ –≤–Ω–µ—Å–µ–Ω–Ω—ñ –∑–º—ñ–Ω.",
        reply_markup=admin_keyboard
    )
    await state.clear()


@dp.message(F.text == "üìò –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –∑ –µ–∫—Å–ø–ª—É–∞—Ç–∞—Ü—ñ—ó –±–æ—Ç–∞")
async def sending_info(message: types.Message):
    await message.answer_document(FSInputFile("–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å.docx"))


@dp.message(F.text == "üìÑ Config file")
async def sending_config_file(message: types.Message):
    if not is_admin_authorized(message.from_user.id):
        await message.answer("‚ùå –¢–µ—Ä–º—ñ–Ω –≤–∞—à–æ—ó –∞–¥–º—ñ–Ω —Å–µ—Å—ñ—ó –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è.")
        return
    await message.answer("üìÑ –ù–∞–¥—Å–∏–ª–∞—é –Ω–∏–Ω—ñ—à–Ω—ñ–π —Ñ–∞–π–ª *config.py*.", parse_mode="Markdown")
    await message.answer_document(FSInputFile("config.py"))


@dp.message(F.text == "üìù New config file")
async def ask_new_config(message: types.Message, state: FSMContext):
    if not is_admin_authorized(message.from_user.id):
        await message.answer("‚ùå –¢–µ—Ä–º—ñ–Ω –≤–∞—à–æ—ó –∞–¥–º—ñ–Ω —Å–µ—Å—ñ—ó –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è.")
        return
    await message.answer(
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π *config.py*\n\n*–£–í–ê–ì–ê!* –ø—ñ—Å–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥ —Ñ–∞–π–ª—É –±–æ—Ç –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç—å—Å—è —ñ –≤—Å—ñ –∞–¥–º—ñ–Ω —Å–µ—Å—ñ—ó –ø—Ä–∏–ø–∏–Ω—è—Ç—å—Å—è.",
        parse_mode="Markdown", reply_markup=back_keyboard)
    await state.set_state(AdminState.waiting_for_config)


@dp.message(AdminState.waiting_for_config, F.content_type == ContentType.DOCUMENT)
async def update_config_file(message: types.Message, state: FSMContext):
    if not is_admin_authorized(message.from_user.id):
        return

    if message.document.file_name != "config.py":
        return await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª *config.py*\n–í—ñ–Ω –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ –Ω–∞–∑–≤—É \"config.py\"",
                                     parse_mode="Markdown")

    tmp_path = f"config_new_{int(time.time())}.py"
    await bot.download(message.document, destination=tmp_path)

    os.replace(tmp_path, "config.py")

    try:
        for pyc in glob.glob("__pycache__/config*.pyc"):
            os.remove(pyc)
        importlib.reload(config)

        global admins_password, studrada_tg_link, coefficients_link, NMT_link, link_schedule, CHANNEL_ID, link_info, link_social, link_consultation
        admins_password = config.admins_password
        studrada_tg_link = config.studrada_tg_link
        coefficients_link = config.coefficients_link
        NMT_link = config.NMT_link
        link_schedule = config.link_schedule
        CHANNEL_ID = config.CHANNEL_ID
        link_info = config.link_info
        link_social = config.link_social
        link_consultation = config.link_consultation

        await message.answer("‚úÖ –ù–æ–≤–∏–π *config.py* –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ.", parse_mode="Markdown", reply_markup=menu_start_keyboard)
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞:\n`{e}`", parse_mode="Markdown")

    await state.clear()


@dp.message(F.text == "üóÉ Config_media")
async def export_config_media(message: types.Message):
    if not is_admin_authorized(message.from_user.id):
        await message.answer("‚ùå –¢–µ—Ä–º—ñ–Ω –≤–∞—à–æ—ó –∞–¥–º—ñ–Ω —Å–µ—Å—ñ—ó –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è.")
        return

    zip_path = "config_media.zip"
    folder_path = "config_media"

    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for root, _, files in os.walk(folder_path):
            for file in files:
                file_path = os.path.join(root, file)
                arcname = os.path.relpath(file_path, folder_path)
                zipf.write(file_path, arcname)

    await message.answer("üóÉ –ù–∞–¥—Å–∏–ª–∞—é –Ω–∏–Ω—ñ—à–Ω—ñ–π –∞—Ä—Ö—ñ–≤ *config_media.zip*.", parse_mode="Markdown")
    await message.answer_document(FSInputFile(zip_path))
    os.remove(zip_path)


@dp.message(F.text == "üì• New config_media")
async def prompt_config_media_upload(message: types.Message, state: FSMContext):
    if not is_admin_authorized(message.from_user.id):
        return await message.answer("‚ùå –¢–µ—Ä–º—ñ–Ω –≤–∞—à–æ—ó –∞–¥–º—ñ–Ω —Å–µ—Å—ñ—ó –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è.")

    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∞—Ä—Ö—ñ–≤ *config_media.zip*", parse_mode="Markdown", reply_markup=back_keyboard)
    await state.set_state(AdminState.waiting_for_config_media_zip)


@dp.message(AdminState.waiting_for_config_media_zip, F.document)
async def import_config_media(message: types.Message, state: FSMContext):
    if not is_admin_authorized(message.from_user.id):
        return

    if message.document.file_name != "config_media.zip":
        return await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∞—Ä—Ö—ñ–≤ *config_media.zip*\n–í—ñ–Ω –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ –Ω–∞–∑–≤—É \"*config_media.zip*\"",
                                     parse_mode="Markdown")

    zip_path = f"config_media_tmp_{int(time.time())}.zip"
    extract_path = "config_media_new"
    await bot.download(message.document, zip_path)

    try:
        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            zip_ref.extractall(extract_path)

        if os.path.exists("config_media"):
            import shutil
            shutil.rmtree("config_media")
        os.rename(extract_path, "config_media")
        await message.answer("‚úÖ –ü–∞–ø–∫—É config_media —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=admin_keyboard)
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ: {e}", reply_markup=admin_keyboard)
    finally:
        if os.path.exists(zip_path):
            os.remove(zip_path)
        if os.path.exists(extract_path):
            import shutil
            shutil.rmtree(extract_path, ignore_errors=True)
        await state.clear()


@dp.message(F.text == "üìú –ê—Ä—Öi–≤")
async def archive_command(message: types.Message):
    if message.from_user.id not in authorized_admins:
        await message.answer("‚ùå –¢–µ—Ä–º—ñ–Ω –≤–∞—à–æ—ó –∞–¥–º—ñ–Ω —Å–µ—Å—ñ—ó –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è.")
        return
    folder_map = {
        "–°–∫–∞—Ä–≥–∏ —Ç–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è": "–°–∫–∞—Ä–≥–∏ —Ç–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è",
        "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—Ä—É—à–µ–Ω–Ω—è": "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—Ä—É—à–µ–Ω–Ω—è",
        "–ó–∞–ø–∏—Ç–∏ –Ω–∞ –≤—Å—Ç—É–ø –¥–æ –°—Ç—É–¥—Ä–∞–¥–∏": "–ó–∞–ø–∏—Ç–∏ –Ω–∞ –≤—Å—Ç—É–ø –¥–æ –°—Ç—É–¥—Ä–∞–¥–∏"
    }
    zip_files = []
    for key, folder in folder_map.items():
        folder_path = os.path.join(configC.ARCHIVE_FOLDER, folder)
        if not os.path.exists(folder_path):
            continue
        zip_path = os.path.join(configC.ARCHIVE_FOLDER, f"{folder}.zip")
        with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for root, dirs, files in os.walk(folder_path):
                for file in files:
                    file_path = os.path.join(root, file)
                    arcname = os.path.relpath(file_path, start=folder_path)
                    zipf.write(file_path, arcname=arcname)
        zip_files.append(zip_path)
    
    if not zip_files:
        await message.answer("üìÇ –ê—Ä—Ö—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    
    await message.answer("üìú –ù–∞–¥—Å–∏–ª–∞—é –∞—Ä—Ö—ñ–≤–Ω—ñ —Ñ–∞–π–ª–∏...")
    for zip_file in zip_files:
        document = FSInputFile(zip_file)
        await message.answer_document(document)

    for zip_file in zip_files:
        os.remove(zip_file)


@dp.message(StateFilter(AdminState.waiting_for_config, AdminState.waiting_for_config_media_zip), F.text == "‚ùå –í—ñ–¥–º—ñ–Ω–∞")
async def cancel_config_upload(message: types.Message, state: FSMContext):
    await message.answer("‚ùå –í—ñ–¥–º—ñ–Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó.", reply_markup=admin_keyboard)
    await state.clear()


@dp.message(F.from_user.id.in_(active_forms) & F.content_type.in_([ContentType.TEXT, ContentType.PHOTO]))
async def save_form_data(message: types.Message):
    user_id = message.from_user.id
    form_type = active_forms[user_id]

    if message.text == "‚ùå –í—ñ–¥–º—ñ–Ω–∞":
        active_forms.pop(user_id, None)
        submissions.pop(user_id, None)
        await message.answer(f"‚ùå –í—ñ–¥–º—ñ–Ω–∞ –ø–æ–¥–∞–Ω–Ω—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è.", reply_markup=menu_student_keyboard)
        return
    
    folder = os.path.join(config.ARCHIVE_FOLDER, form_type)
    os.makedirs(folder, exist_ok=True)
    
    current_time = time.time()
    if user_id in submissions and (current_time - submissions[user_id]["last_update"] < 10):
        folder_path = submissions[user_id]["folder_path"]
        submissions[user_id]["last_update"] = current_time
    else:
        folder_name = "‚Ññ" + str(int(current_time * 1000))
        folder_path = os.path.join(folder, folder_name)
        os.makedirs(folder_path, exist_ok=True)
        submissions[user_id] = {"folder_path": folder_path, "last_update": current_time}
    
    text_content = (message.text or message.caption or "").strip()
    if text_content:
        text_file_path = os.path.join(folder_path, "text.txt")
        with open(text_file_path, "a", encoding="utf-8") as f:
            f.write(text_content + "\n" + ("-" * 40) + "\n")
    
    if message.photo:
        photo = message.photo[-1]
        photo_filename = "photo_" + str(int(time.time() * 1000)) + ".jpg"
        photo_path = os.path.join(folder_path, photo_filename)
        file_info = await bot.get_file(photo.file_id)
        await bot.download_file(file_path=file_info.file_path, destination=photo_path)

    file_id = message.photo[-1].file_id if message.photo else None
    caption = message.caption if message.caption else message.text or " "

    formatted_caption = f"üì© <b>–ù–æ–≤–∏–π –∑–∞–ø–∏—Å ({form_type})</b>\n\n{caption}"
    if file_id:
        await bot.send_photo(config.CHANNEL_ID, file_id, caption=formatted_caption, parse_mode="HTML")
    else:
        await bot.send_message(config.CHANNEL_ID, formatted_caption, parse_mode="HTML")

    active_forms.pop(user_id, None)
    submissions.pop(user_id, None)
    await message.answer("‚úÖ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è!", reply_markup=menu_start_keyboard)


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

